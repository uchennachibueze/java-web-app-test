// import hudson.model.*
// import hudson.plugins.git.*

pipeline {
  agent any
  stages {
    stage('Test') {
      steps {
        def ln = System.getProperty('line.separator')
        println "---------------Groovy Changelog script Started---------------$ln"
        def previousBuild = currentBuild.previousBuild
        println "Previous Build: ${previousBuild}"
        println "Previous Build Result: ${previousBuild.result}"
        println "Previous Build Number: ${previousBuild.number}"
      }
    }
  }
}
// def ln = System.getProperty('line.separator')
// println "---------------Groovy Changelog script Started---------------$ln"

// def lastSuccessfulBuild = build.previousNotFailedBuild
// def failed = build.result != hudson.model.Result.SUCCESS
// def previousBuild = currentBuild.previousBuild

// println "Last Successful Build: ${lastSuccessfulBuild}"
// println "Current Build Result, is failed?: ${failed}"


// def currResult = build.result
// def prevResult = build.previousBuild?.result ?: null
// def consecutiveSuccess = currResult == hudson.model.Result.SUCCESS && prevResult == hudson.model.Result.SUCCESS

// def builds = []
// def changes = []
// def count = 0

// if (consecutiveSuccess) {
//     println "Last Build was successful, getting latest changes$ln"
//     builds << build
//     def changeItems = build.changeSet.items
//     println "Change Items: ${changeItems}$ln"
//     count += changeItems.length
//     changes += changeItems as List
// } else {
//     println "Last Build was not successful, getting changes from all failed builds as well$ln"
//     while (lastSuccessfulBuild) {
//         builds << lastSuccessfulBuild
//         def changeSet = lastSuccessfulBuild.changeSet
//         if (!changeSet.emptySet) {
//             def changeItems = lastSuccessfulBuild.changeSet.items
//             count += changeItems.length
//             changes += changeItems as List
//         }
//         lastSuccessfulBuild = lastSuccessfulBuild.nextBuild
//     }
// }

// def file = new File(build.getEnvVars()["WORKSPACE"] + '\\changelog')
// file.delete()
// file = new File(build.getEnvVars()["WORKSPACE"] + '\\changelog')

// if (count == 0) {
//     file << "No changes.$ln"
// }

// changes.each { item ->
//     println "item: $item$ln"
//     println "author: $item.authorName$ln"
//     println "msg: $item.msg$ln"
//     println "id: $item.id$ln"
//     println "revision: $item.revision$ln"
//     println "comment: $item.comment$ln"
//     println "commentAnnotated: $item.commentAnnotated$ln"
//     println "affectedFiles: $item.affectedFiles$ln"
//     println "affectedPaths: $item.affectedPaths$ln"
//     println "commitId: $item.commitId$ln"
//     println "timestamp: $item.timestamp$ln"
// }
